// PostgreSQL を前提とした Prisma スキーマ
// 環境変数 DATABASE_URL を設定してください。

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth 標準モデル + 追加フィールド（hashedPassword）
model User {
  id              String    @id @default(uuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  username        String?   @unique
  displayName     String?
  bio             String?
  avatarUrl       String?
  socialLinks     Json?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  articles        Article[]
  likes           Like[]
  comments        Comment[]
  following       Follow[]  @relation("following")
  followers       Follow[]  @relation("followers")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ArticleStatus {
  draft
  published
  private
}

model Article {
  id              String         @id @default(uuid())
  userId          String
  title           String
  content         String
  animationConfig Json?
  coverImageUrl   String?
  status          ArticleStatus  @default(draft)
  publishedAt     DateTime?
  viewCount       Int            @default(0)
  likeCount       Int            @default(0)
  commentCount    Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags ArticleTag[]
  likes Like[]
  comments Comment[]

  @@index([userId, status, createdAt])
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  color     String?
  createdAt DateTime     @default(now())
  articles  ArticleTag[]
}

model ArticleTag {
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  articleId String
  parentId  String?
  content   String
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent  Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentToComment")
}

model Follow {
  id           String   @id @default(uuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}


